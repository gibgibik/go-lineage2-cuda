package main

import (
	"fmt"
	"gocv.io/x/gocv"
	"image"
	"image/color"
)

func main() {
	model := "dbnet.onnx" // –∑–∞–≤–∞–Ω—Ç–∞–∂ –º–æ–¥–µ–ª—å —Å—é–¥–∏
	inputPath := "1.png"
	outputPath := "output.png"

	// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
	net := gocv.ReadNet(model, "input")
	if net.Empty() {
		panic("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å")
	}
	defer net.Close()

	// –í–º–∏–∫–∞—î–º–æ CUDA
	net.SetPreferableBackend(gocv.NetBackendCUDA)
	net.SetPreferableTarget(gocv.NetTargetCUDA)

	// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
	img := gocv.IMRead(inputPath, gocv.IMReadColor)
	if img.Empty() {
		panic("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
	}
	defer img.Close()

	// –†–æ–∑–º—ñ—Ä –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è DBNet
	inputSize := image.Pt(736, 736)
	blob := gocv.BlobFromImage(img, 1.0/255.0, inputSize, gocv.NewScalar(0, 0, 0, 0), true, false)
	defer blob.Close()

	net.SetInput(blob, "input")

	// –ü—Ä–æ–≥–∞–Ω—è—î–º–æ forward
	result := net.Forward("logits")
	defer result.Close()

	dims := result.Size()
	fmt.Println("üß† Output shape:", dims)
	if len(dims) != 4 || dims[1] != 1 {
		panic(fmt.Sprintf("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ —Ñ–æ—Ä–º–∞ –≤–∏—Ö–æ–¥—É: %v", dims))
	}

	// –û—Ç—Ä–∏–º—É—î–º–æ 2D –∫–∞—Ä—Ç—É –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π
	channels := gocv.Split(result)
	if len(channels) < 1 {
		panic("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–¥—ñ–ª–∏—Ç–∏ –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É")
	}
	probMap := channels[0]
	defer probMap.Close()

	// –†–µ—Å–∞–π–∑ –¥–æ —Ä–æ–∑–º—ñ—Ä—É –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
	gocv.Resize(probMap, &probMap, image.Pt(img.Cols(), img.Rows()), 0, 0, gocv.InterpolationLinear)

	// –ë—ñ–Ω–∞—Ä–∏–∑–∞—Ü—ñ—è (–ø–æ—Ä—ñ–≥ 0.3)
	binary := gocv.NewMat()
	defer binary.Close()
	gocv.Threshold(probMap, &binary, 0.3, 255, gocv.ThresholdBinary)

	// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–Ω—Ç—É—Ä–∏
	contours := gocv.FindContours(binary, gocv.RetrievalExternal, gocv.ChainApproxSimple)
	defer contours.Close()

	// –ú–∞–ª—é—î–º–æ —Ä–∞–º–∫–∏
	for i := 0; i < contours.Size(); i++ {
		c := contours.At(i)
		rect := gocv.BoundingRect(c)
		gocv.Rectangle(&img, rect, color.RGBA{0, 255, 0, 0}, 2)
	}

	// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	ok := gocv.IMWrite(outputPath, img)
	if !ok {
		panic("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª")
	}

	fmt.Println("‚úÖ –ì–æ—Ç–æ–≤–æ! –ó–±–µ—Ä–µ–∂–µ–Ω–æ:", outputPath)
}
